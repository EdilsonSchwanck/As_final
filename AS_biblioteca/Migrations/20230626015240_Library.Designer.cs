// <auto-generated />
using AS_biblioteca.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AS_biblioteca.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230626015240_Library")]
    partial class Library
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BookId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("Varchar(200)")
                        .HasColumnName("Publisher");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Serial Number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("Varchar(200)")
                        .HasColumnName("Title");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Acao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Acao");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BookId");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Library", (string)null);
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BookId");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("Varchar(14)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(200)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook", (string)null);
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor", (string)null);
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.Book", b =>
                {
                    b.HasOne("AS_biblioteca.Domain.Entities.User", "User")
                        .WithMany("Book")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.Library", b =>
                {
                    b.HasOne("AS_biblioteca.Domain.Entities.Book", "Book")
                        .WithMany("Librarys")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AS_biblioteca.Domain.Entities.User", "User")
                        .WithMany("Librarys")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("AS_biblioteca.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS_biblioteca.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.HasOne("AS_biblioteca.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AS_biblioteca.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.Book", b =>
                {
                    b.Navigation("Librarys");
                });

            modelBuilder.Entity("AS_biblioteca.Domain.Entities.User", b =>
                {
                    b.Navigation("Book");

                    b.Navigation("Librarys");
                });
#pragma warning restore 612, 618
        }
    }
}
